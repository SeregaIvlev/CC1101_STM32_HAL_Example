
CC1101_HAL_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002538  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e4  080026e4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026ec  080026ec  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  2000003c  08002730  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002730  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a990  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001914  00000000  00000000  0002a9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0002c310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002cc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015290  00000000  00000000  0002d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a43e  00000000  00000000  00042778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008356c  00000000  00000000  0004cbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0122  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002500  00000000  00000000  000d0178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080026b4 	.word	0x080026b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	080026b4 	.word	0x080026b4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_GPIO_EXTI_Callback>:
uint8_t lth = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GDO2_Pin)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004dc:	d106      	bne.n	80004ec <HAL_GPIO_EXTI_Callback+0x20>
	{
		lth = CC1101_ReadPacket(rxData);
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_GPIO_EXTI_Callback+0x28>)
 80004e0:	f000 fadb 	bl	8000a9a <CC1101_ReadPacket>
 80004e4:	4603      	mov	r3, r0
 80004e6:	461a      	mov	r2, r3
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80004ea:	701a      	strb	r2, [r3, #0]
	}
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000005c 	.word	0x2000005c
 80004f8:	20000058 	.word	0x20000058

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fbce 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f80e 	bl	8000524 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f8d8 	bl	80006bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f8ac 	bl	8000668 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000510:	f000 f874 	bl	80005fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  CC1101_GPIO_Prepare();
 8000514:	f000 fa8f 	bl	8000a36 <CC1101_GPIO_Prepare>
  CC1101_Init();
 8000518:	f000 fa94 	bl	8000a44 <CC1101_Init>

  CC1101_GoToRX();
 800051c:	f000 fab2 	bl	8000a84 <CC1101_GoToRX>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x24>
	...

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f002 f8b6 	bl	80026a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a21      	ldr	r2, [pc, #132]	; (80005f8 <SystemClock_Config+0xd4>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000598:	2310      	movs	r3, #16
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 fed4 	bl	800135c <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 f90d 	bl	80007d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f936 	bl	800184c <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 f8f7 	bl	80007d8 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <MX_SPI1_Init+0x64>)
 8000602:	4a18      	ldr	r2, [pc, #96]	; (8000664 <MX_SPI1_Init+0x68>)
 8000604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000606:	4b16      	ldr	r3, [pc, #88]	; (8000660 <MX_SPI1_Init+0x64>)
 8000608:	f44f 7282 	mov.w	r2, #260	; 0x104
 800060c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_SPI1_Init+0x64>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_SPI1_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_SPI1_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_SPI1_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_SPI1_Init+0x64>)
 8000628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800062c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_SPI1_Init+0x64>)
 8000630:	2220      	movs	r2, #32
 8000632:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <MX_SPI1_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_SPI1_Init+0x64>)
 8000648:	220a      	movs	r2, #10
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800064c:	4804      	ldr	r0, [pc, #16]	; (8000660 <MX_SPI1_Init+0x64>)
 800064e:	f001 faf9 	bl	8001c44 <HAL_SPI_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000658:	f000 f8be 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000007c 	.word	0x2000007c
 8000664:	40013000 	.word	0x40013000

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800066e:	4a12      	ldr	r2, [pc, #72]	; (80006b8 <MX_USART2_UART_Init+0x50>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800067a:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000680:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800068e:	220c      	movs	r2, #12
 8000690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f001 fdc6 	bl	8002230 <HAL_UART_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006aa:	f000 f895 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200000d4 	.word	0x200000d4
 80006b8:	40004400 	.word	0x40004400

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08a      	sub	sp, #40	; 0x28
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b3c      	ldr	r3, [pc, #240]	; (80007c8 <MX_GPIO_Init+0x10c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a3b      	ldr	r2, [pc, #236]	; (80007c8 <MX_GPIO_Init+0x10c>)
 80006dc:	f043 0304 	orr.w	r3, r3, #4
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b39      	ldr	r3, [pc, #228]	; (80007c8 <MX_GPIO_Init+0x10c>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0304 	and.w	r3, r3, #4
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <MX_GPIO_Init+0x10c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a34      	ldr	r2, [pc, #208]	; (80007c8 <MX_GPIO_Init+0x10c>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <MX_GPIO_Init+0x10c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b2e      	ldr	r3, [pc, #184]	; (80007c8 <MX_GPIO_Init+0x10c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a2d      	ldr	r2, [pc, #180]	; (80007c8 <MX_GPIO_Init+0x10c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <MX_GPIO_Init+0x10c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <MX_GPIO_Init+0x10c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a26      	ldr	r2, [pc, #152]	; (80007c8 <MX_GPIO_Init+0x10c>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <MX_GPIO_Init+0x10c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0302 	and.w	r3, r3, #2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	4821      	ldr	r0, [pc, #132]	; (80007cc <MX_GPIO_Init+0x110>)
 8000748:	f000 fdd6 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC1101_CS_GPIO_Port, CC1101_CS_Pin, GPIO_PIN_SET);
 800074c:	2201      	movs	r2, #1
 800074e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000752:	481e      	ldr	r0, [pc, #120]	; (80007cc <MX_GPIO_Init+0x110>)
 8000754:	f000 fdd0 	bl	80012f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800075e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	4619      	mov	r1, r3
 800076e:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_GPIO_Init+0x114>)
 8000770:	f000 fc3e 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CC1101_CS_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CC1101_CS_Pin;
 8000774:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	480f      	ldr	r0, [pc, #60]	; (80007cc <MX_GPIO_Init+0x110>)
 800078e:	f000 fc2f 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GDO2_Pin */
  GPIO_InitStruct.Pin = GDO2_Pin;
 8000792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000798:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GDO2_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <MX_GPIO_Init+0x118>)
 80007aa:	f000 fc21 	bl	8000ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f000 fbe5 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b8:	2028      	movs	r0, #40	; 0x28
 80007ba:	f000 fbfe 	bl	8000fba <HAL_NVIC_EnableIRQ>

}
 80007be:	bf00      	nop
 80007c0:	3728      	adds	r7, #40	; 0x28
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020400 	.word	0x40020400

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <HAL_MspInit+0x4c>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a08      	ldr	r2, [pc, #32]	; (8000830 <HAL_MspInit+0x4c>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000822:	2007      	movs	r0, #7
 8000824:	f000 fba2 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800

08000834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_SPI_MspInit+0x84>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12b      	bne.n	80008ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
 800085a:	4b18      	ldr	r3, [pc, #96]	; (80008bc <HAL_SPI_MspInit+0x88>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000860:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000864:	6453      	str	r3, [r2, #68]	; 0x44
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_SPI_MspInit+0x88>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_SPI_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800088e:	2338      	movs	r3, #56	; 0x38
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800089e:	2305      	movs	r3, #5
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <HAL_SPI_MspInit+0x8c>)
 80008aa:	f000 fba1 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40013000 	.word	0x40013000
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020400 	.word	0x40020400

080008c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_UART_MspInit+0x84>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d12b      	bne.n	800093e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <HAL_UART_MspInit+0x88>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f4:	6413      	str	r3, [r2, #64]	; 0x40
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_UART_MspInit+0x88>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0x88>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800091e:	230c      	movs	r3, #12
 8000920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800092e:	2307      	movs	r3, #7
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	; (8000950 <HAL_UART_MspInit+0x8c>)
 800093a:	f000 fb59 	bl	8000ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3728      	adds	r7, #40	; 0x28
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40004400 	.word	0x40004400
 800094c:	40023800 	.word	0x40023800
 8000950:	40020000 	.word	0x40020000

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <NMI_Handler+0x4>

0800095a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <HardFault_Handler+0x4>

08000960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <MemManage_Handler+0x4>

08000966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800096a:	e7fe      	b.n	800096a <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <UsageFault_Handler+0x4>

08000972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f9d0 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GDO2_Pin);
 80009ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80009b0:	f000 fcbc 	bl	800132c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009b8:	f000 fcb8 	bl	800132c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	; (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 80009e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a0e:	f7ff ffd7 	bl	80009c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 fe23 	bl	800265c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd71 	bl	80004fc <main>
  bx  lr    
 8000a1a:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000a28:	080026f4 	.word	0x080026f4
  ldr r2, =_sbss
 8000a2c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000a30:	2000011c 	.word	0x2000011c

08000a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC_IRQHandler>

08000a36 <CC1101_GPIO_Prepare>:
void __CC1101_BurstWriteReg(uint8_t addr, uint8_t lth, uint8_t* data);
void __CC1101_WriteCMD(uint8_t cmd);
uint8_t __CC1101_ReadStatusRegs(uint8_t addr);


uint8_t CC1101_GPIO_Prepare(){
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
	___CC1101_USER_CS_High();
 8000a3a:	f000 f919 	bl	8000c70 <___CC1101_USER_CS_High>
	return CC1101_OK;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <CC1101_Init>:
uint8_t CC1101_Init(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

	__CC1101_WriteCMD(CC1101_SRES);
 8000a4a:	2030      	movs	r0, #48	; 0x30
 8000a4c:	f000 f8cb 	bl	8000be6 <__CC1101_WriteCMD>
	HAL_Delay(100);
 8000a50:	2064      	movs	r0, #100	; 0x64
 8000a52:	f000 f997 	bl	8000d84 <HAL_Delay>
	uint8_t ID = __CC1101_ReadReg(AGCTEST);
 8000a56:	202b      	movs	r0, #43	; 0x2b
 8000a58:	f000 f850 	bl	8000afc <__CC1101_ReadReg>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
	if(ID != CC1101_DEVICE_ID)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b3f      	cmp	r3, #63	; 0x3f
 8000a64:	d001      	beq.n	8000a6a <CC1101_Init+0x26>
		return CC1101_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e005      	b.n	8000a76 <CC1101_Init+0x32>

	__CC1101_BurstWriteReg(0x00, 47, CC1101_DefaultSettings);
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <CC1101_Init+0x3c>)
 8000a6c:	212f      	movs	r1, #47	; 0x2f
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f88d 	bl	8000b8e <__CC1101_BurstWriteReg>

	return CC1101_OK;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000004 	.word	0x20000004

08000a84 <CC1101_GoToRX>:
	__CC1101_WriteCMD(CC1101_SFTX);
	//CC1101_TXPacketCmpl_Callback();
	return CC1101_OK;
}
uint8_t CC1101_GoToRX()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	__CC1101_WriteCMD(CC1101_SIDLE);
 8000a88:	2036      	movs	r0, #54	; 0x36
 8000a8a:	f000 f8ac 	bl	8000be6 <__CC1101_WriteCMD>
	__CC1101_WriteCMD(CC1101_SRX);        //start receive
 8000a8e:	2034      	movs	r0, #52	; 0x34
 8000a90:	f000 f8a9 	bl	8000be6 <__CC1101_WriteCMD>
	return CC1101_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <CC1101_ReadPacket>:
{
	return __CC1101_ReadStatusRegs(CC1101_RXBYTES) & 0x7F;

}
uint8_t CC1101_ReadPacket(uint8_t* data)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]


	uint8_t size;
	uint8_t status[2];

	if(__CC1101_ReadStatusRegs(CC1101_RXBYTES) & 0x7F)
 8000aa2:	203b      	movs	r0, #59	; 0x3b
 8000aa4:	f000 f8b0 	bl	8000c08 <__CC1101_ReadStatusRegs>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d019      	beq.n	8000ae6 <CC1101_ReadPacket+0x4c>
	{
		size=__CC1101_ReadReg(CC1101_RXFIFO);
 8000ab2:	203f      	movs	r0, #63	; 0x3f
 8000ab4:	f000 f822 	bl	8000afc <__CC1101_ReadReg>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]
		__CC1101_BurstReadReg(CC1101_RXFIFO, size, data);
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	203f      	movs	r0, #63	; 0x3f
 8000ac4:	f000 f83a 	bl	8000b3c <__CC1101_BurstReadReg>
		__CC1101_BurstReadReg(CC1101_RXFIFO, 2, status);
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	461a      	mov	r2, r3
 8000ace:	2102      	movs	r1, #2
 8000ad0:	203f      	movs	r0, #63	; 0x3f
 8000ad2:	f000 f833 	bl	8000b3c <__CC1101_BurstReadReg>
		__CC1101_WriteCMD(CC1101_SFRX);
 8000ad6:	203a      	movs	r0, #58	; 0x3a
 8000ad8:	f000 f885 	bl	8000be6 <__CC1101_WriteCMD>
		__CC1101_WriteCMD(CC1101_SRX);
 8000adc:	2034      	movs	r0, #52	; 0x34
 8000ade:	f000 f882 	bl	8000be6 <__CC1101_WriteCMD>
		return size;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	e006      	b.n	8000af4 <CC1101_ReadPacket+0x5a>
	}
	else
	{
		__CC1101_WriteCMD(CC1101_SFRX);
 8000ae6:	203a      	movs	r0, #58	; 0x3a
 8000ae8:	f000 f87d 	bl	8000be6 <__CC1101_WriteCMD>
		__CC1101_WriteCMD(CC1101_SRX);
 8000aec:	2034      	movs	r0, #52	; 0x34
 8000aee:	f000 f87a 	bl	8000be6 <__CC1101_WriteCMD>
 		return 0;
 8000af2:	2300      	movs	r3, #0
	}
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <__CC1101_ReadReg>:
}


/* non-user functions */
uint8_t __CC1101_ReadReg(uint8_t addr)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	73fb      	strb	r3, [r7, #15]
	addr &= 0b00111111;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b10:	71fb      	strb	r3, [r7, #7]
	___CC1101_USER_CS_Low();
 8000b12:	f000 f8b9 	bl	8000c88 <___CC1101_USER_CS_Low>
	___CC1101_USER_SPI_TxRx((1<<7) | addr);
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f88e 	bl	8000c40 <___CC1101_USER_SPI_TxRx>
	data = ___CC1101_USER_SPI_TxRx(0x00);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 f88b 	bl	8000c40 <___CC1101_USER_SPI_TxRx>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]
	___CC1101_USER_CS_High();
 8000b2e:	f000 f89f 	bl	8000c70 <___CC1101_USER_CS_High>
	return data;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <__CC1101_BurstReadReg>:
	___CC1101_USER_SPI_TxRx(addr);
	___CC1101_USER_SPI_TxRx(data);
	___CC1101_USER_CS_High();
}
void __CC1101_BurstReadReg(uint8_t addr, uint8_t lth, uint8_t* data)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	603a      	str	r2, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	71bb      	strb	r3, [r7, #6]
	//addr &= 0b00111111;
	___CC1101_USER_CS_Low();
 8000b4c:	f000 f89c 	bl	8000c88 <___CC1101_USER_CS_Low>
	___CC1101_USER_SPI_TxRx( (1<<7) | (1<<6) | addr); //Read and burst bits
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f871 	bl	8000c40 <___CC1101_USER_SPI_TxRx>

	for(uint8_t n = 0; n < lth; n++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e00a      	b.n	8000b7a <__CC1101_BurstReadReg+0x3e>
	{
		data[n] = ___CC1101_USER_SPI_TxRx(0x00);
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	683a      	ldr	r2, [r7, #0]
 8000b68:	18d4      	adds	r4, r2, r3
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f868 	bl	8000c40 <___CC1101_USER_SPI_TxRx>
 8000b70:	4603      	mov	r3, r0
 8000b72:	7023      	strb	r3, [r4, #0]
	for(uint8_t n = 0; n < lth; n++)
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	3301      	adds	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	7bfa      	ldrb	r2, [r7, #15]
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3f0      	bcc.n	8000b64 <__CC1101_BurstReadReg+0x28>
	}

	___CC1101_USER_CS_High();
 8000b82:	f000 f875 	bl	8000c70 <___CC1101_USER_CS_High>
}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd90      	pop	{r4, r7, pc}

08000b8e <__CC1101_BurstWriteReg>:
void __CC1101_BurstWriteReg(uint8_t addr, uint8_t lth, uint8_t* data)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	603a      	str	r2, [r7, #0]
 8000b98:	71fb      	strb	r3, [r7, #7]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	71bb      	strb	r3, [r7, #6]
	addr &= 0b00111111;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ba4:	71fb      	strb	r3, [r7, #7]
	___CC1101_USER_CS_Low();
 8000ba6:	f000 f86f 	bl	8000c88 <___CC1101_USER_CS_Low>
	___CC1101_USER_SPI_TxRx( (1<<6) | addr);		//Write and burst bits
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f844 	bl	8000c40 <___CC1101_USER_SPI_TxRx>

	for(uint8_t n = 0; n < lth; n++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	e009      	b.n	8000bd2 <__CC1101_BurstWriteReg+0x44>
	{
		___CC1101_USER_SPI_TxRx(data[n]);
 8000bbe:	7bfb      	ldrb	r3, [r7, #15]
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f83a 	bl	8000c40 <___CC1101_USER_SPI_TxRx>
	for(uint8_t n = 0; n < lth; n++)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d3f1      	bcc.n	8000bbe <__CC1101_BurstWriteReg+0x30>
	}

	___CC1101_USER_CS_High();
 8000bda:	f000 f849 	bl	8000c70 <___CC1101_USER_CS_High>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <__CC1101_WriteCMD>:
void __CC1101_WriteCMD(uint8_t cmd)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
	___CC1101_USER_CS_Low();
 8000bf0:	f000 f84a 	bl	8000c88 <___CC1101_USER_CS_Low>
	___CC1101_USER_SPI_TxRx(cmd);
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f822 	bl	8000c40 <___CC1101_USER_SPI_TxRx>
	___CC1101_USER_CS_High();
 8000bfc:	f000 f838 	bl	8000c70 <___CC1101_USER_CS_High>

}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <__CC1101_ReadStatusRegs>:
uint8_t __CC1101_ReadStatusRegs(uint8_t addr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  uint8_t value,temp;
  temp = addr | (1<<7) | (1<<6);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000c18:	73fb      	strb	r3, [r7, #15]
  ___CC1101_USER_CS_Low();
 8000c1a:	f000 f835 	bl	8000c88 <___CC1101_USER_CS_Low>
  ___CC1101_USER_SPI_TxRx(temp);
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f80d 	bl	8000c40 <___CC1101_USER_SPI_TxRx>
  value= ___CC1101_USER_SPI_TxRx(0);
 8000c26:	2000      	movs	r0, #0
 8000c28:	f000 f80a 	bl	8000c40 <___CC1101_USER_SPI_TxRx>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73bb      	strb	r3, [r7, #14]
  ___CC1101_USER_CS_High();
 8000c30:	f000 f81e 	bl	8000c70 <___CC1101_USER_CS_High>
  return value;
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <___CC1101_USER_SPI_TxRx>:
#include "main.h"

#define CC_SPI hspi1
extern SPI_HandleTypeDef CC_SPI;

uint8_t ___CC1101_USER_SPI_TxRx(uint8_t dataTX){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	uint8_t dataRX = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&CC_SPI, &dataTX, &dataRX, 1, 100);
 8000c4e:	f107 020f 	add.w	r2, r7, #15
 8000c52:	1df9      	adds	r1, r7, #7
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4804      	ldr	r0, [pc, #16]	; (8000c6c <___CC1101_USER_SPI_TxRx+0x2c>)
 8000c5c:	f001 f87b 	bl	8001d56 <HAL_SPI_TransmitReceive>
	return dataRX;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000007c 	.word	0x2000007c

08000c70 <___CC1101_USER_CS_High>:
void ___CC1101_USER_CS_High(){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CC1101_CS_GPIO_Port, CC1101_CS_Pin, SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7a:	4802      	ldr	r0, [pc, #8]	; (8000c84 <___CC1101_USER_CS_High+0x14>)
 8000c7c:	f000 fb3c 	bl	80012f8 <HAL_GPIO_WritePin>
}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40020000 	.word	0x40020000

08000c88 <___CC1101_USER_CS_Low>:
void ___CC1101_USER_CS_Low(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CC1101_CS_GPIO_Port, CC1101_CS_Pin, RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	4802      	ldr	r0, [pc, #8]	; (8000c9c <___CC1101_USER_CS_Low+0x14>)
 8000c94:	f000 fb30 	bl	80012f8 <HAL_GPIO_WritePin>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f94f 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fd86 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 f967 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 f92f 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	20000038 	.word	0x20000038
 8000d40:	20000034 	.word	0x20000034

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000038 	.word	0x20000038
 8000d68:	20000118 	.word	0x20000118

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000118 	.word	0x20000118

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffde 	bl	8000d6c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000038 	.word	0x20000038

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff3e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff31 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e159      	b.n	80012c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 8148 	bne.w	80012ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d005      	beq.n	8001042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	2b02      	cmp	r3, #2
 8001040:	d130      	bne.n	80010a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	f003 0201 	and.w	r2, r3, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d123      	bne.n	8001134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0203 	and.w	r2, r3, #3
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a2 	beq.w	80012ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b57      	ldr	r3, [pc, #348]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a56      	ldr	r2, [pc, #344]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b54      	ldr	r3, [pc, #336]	; (80012d8 <HAL_GPIO_Init+0x2e8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001192:	4a52      	ldr	r2, [pc, #328]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a49      	ldr	r2, [pc, #292]	; (80012e0 <HAL_GPIO_Init+0x2f0>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x202>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_GPIO_Init+0x2f4>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x1fe>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a47      	ldr	r2, [pc, #284]	; (80012e8 <HAL_GPIO_Init+0x2f8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x1fa>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a46      	ldr	r2, [pc, #280]	; (80012ec <HAL_GPIO_Init+0x2fc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x1f6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a45      	ldr	r2, [pc, #276]	; (80012f0 <HAL_GPIO_Init+0x300>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x1f2>
 80011de:	2304      	movs	r3, #4
 80011e0:	e008      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011e6:	2303      	movs	r3, #3
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x204>
 80011f2:	2300      	movs	r3, #0
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_GPIO_Init+0x2ec>)
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001212:	4b38      	ldr	r3, [pc, #224]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001236:	4a2f      	ldr	r2, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800123c:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a1a      	ldr	r2, [pc, #104]	; (80012f4 <HAL_GPIO_Init+0x304>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_GPIO_Init+0x304>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_GPIO_Init+0x304>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	2b0f      	cmp	r3, #15
 80012c4:	f67f aea2 	bls.w	800100c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40013800 	.word	0x40013800
 80012e0:	40020000 	.word	0x40020000
 80012e4:	40020400 	.word	0x40020400
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40013c00 	.word	0x40013c00

080012f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
 8001304:	4613      	mov	r3, r2
 8001306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001308:	787b      	ldrb	r3, [r7, #1]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130e:	887a      	ldrh	r2, [r7, #2]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001314:	e003      	b.n	800131e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	041a      	lsls	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	619a      	str	r2, [r3, #24]
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001338:	695a      	ldr	r2, [r3, #20]
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d006      	beq.n	8001350 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001342:	4a05      	ldr	r2, [pc, #20]	; (8001358 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8be 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40013c00 	.word	0x40013c00

0800135c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e264      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d075      	beq.n	8001466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137a:	4ba3      	ldr	r3, [pc, #652]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d00c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001386:	4ba0      	ldr	r3, [pc, #640]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138e:	2b08      	cmp	r3, #8
 8001390:	d112      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001392:	4b9d      	ldr	r3, [pc, #628]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800139e:	d10b      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	4b99      	ldr	r3, [pc, #612]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d05b      	beq.n	8001464 <HAL_RCC_OscConfig+0x108>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d157      	bne.n	8001464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e23f      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x74>
 80013c2:	4b91      	ldr	r3, [pc, #580]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a90      	ldr	r2, [pc, #576]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b8b      	ldr	r3, [pc, #556]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a8a      	ldr	r2, [pc, #552]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b88      	ldr	r3, [pc, #544]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a87      	ldr	r2, [pc, #540]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013f4:	4b84      	ldr	r3, [pc, #528]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a83      	ldr	r2, [pc, #524]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a80      	ldr	r2, [pc, #512]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fcaa 	bl	8000d6c <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fca6 	bl	8000d6c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e204      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b76      	ldr	r3, [pc, #472]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xc0>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fc96 	bl	8000d6c <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fc92 	bl	8000d6c <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1f0      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b6c      	ldr	r3, [pc, #432]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0xe8>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001472:	4b65      	ldr	r3, [pc, #404]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b62      	ldr	r3, [pc, #392]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b5c      	ldr	r3, [pc, #368]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1c4      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b56      	ldr	r3, [pc, #344]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4952      	ldr	r1, [pc, #328]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b4f      	ldr	r3, [pc, #316]	; (800160c <HAL_RCC_OscConfig+0x2b0>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc4b 	bl	8000d6c <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fc47 	bl	8000d6c <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1a5      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b43      	ldr	r3, [pc, #268]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4940      	ldr	r1, [pc, #256]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_OscConfig+0x2b0>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fc2a 	bl	8000d6c <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fc26 	bl	8000d6c <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e184      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d030      	beq.n	80015a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b30      	ldr	r3, [pc, #192]	; (8001610 <HAL_RCC_OscConfig+0x2b4>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fc0a 	bl	8000d6c <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fc06 	bl	8000d6c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e164      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x200>
 800157a:	e015      	b.n	80015a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_RCC_OscConfig+0x2b4>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff fbf3 	bl	8000d6c <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fbef 	bl	8000d6c <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e14d      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 800159e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a0 	beq.w	80016f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10f      	bne.n	80015e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e2:	2301      	movs	r3, #1
 80015e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_OscConfig+0x2b8>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d121      	bne.n	8001636 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_RCC_OscConfig+0x2b8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_RCC_OscConfig+0x2b8>)
 80015f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fbb5 	bl	8000d6c <HAL_GetTick>
 8001602:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	e011      	b.n	800162a <HAL_RCC_OscConfig+0x2ce>
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800
 800160c:	42470000 	.word	0x42470000
 8001610:	42470e80 	.word	0x42470e80
 8001614:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001618:	f7ff fba8 	bl	8000d6c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e106      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	4b85      	ldr	r3, [pc, #532]	; (8001840 <HAL_RCC_OscConfig+0x4e4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	2b00      	cmp	r3, #0
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d106      	bne.n	800164c <HAL_RCC_OscConfig+0x2f0>
 800163e:	4b81      	ldr	r3, [pc, #516]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001642:	4a80      	ldr	r2, [pc, #512]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6713      	str	r3, [r2, #112]	; 0x70
 800164a:	e01c      	b.n	8001686 <HAL_RCC_OscConfig+0x32a>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x312>
 8001654:	4b7b      	ldr	r3, [pc, #492]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	4a7a      	ldr	r2, [pc, #488]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 800165a:	f043 0304 	orr.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	; 0x70
 8001660:	4b78      	ldr	r3, [pc, #480]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001664:	4a77      	ldr	r2, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	; 0x70
 800166c:	e00b      	b.n	8001686 <HAL_RCC_OscConfig+0x32a>
 800166e:	4b75      	ldr	r3, [pc, #468]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001672:	4a74      	ldr	r2, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001674:	f023 0301 	bic.w	r3, r3, #1
 8001678:	6713      	str	r3, [r2, #112]	; 0x70
 800167a:	4b72      	ldr	r3, [pc, #456]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	4a71      	ldr	r2, [pc, #452]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d015      	beq.n	80016ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168e:	f7ff fb6d 	bl	8000d6c <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fb69 	bl	8000d6c <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e0c5      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ac:	4b65      	ldr	r3, [pc, #404]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0ee      	beq.n	8001696 <HAL_RCC_OscConfig+0x33a>
 80016b8:	e014      	b.n	80016e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb57 	bl	8000d6c <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb53 	bl	8000d6c <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0af      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d8:	4b5a      	ldr	r3, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ee      	bne.n	80016c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d105      	bne.n	80016f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ea:	4b56      	ldr	r3, [pc, #344]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a55      	ldr	r2, [pc, #340]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80016f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 809b 	beq.w	8001836 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001700:	4b50      	ldr	r3, [pc, #320]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 030c 	and.w	r3, r3, #12
 8001708:	2b08      	cmp	r3, #8
 800170a:	d05c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d141      	bne.n	8001798 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001714:	4b4c      	ldr	r3, [pc, #304]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171a:	f7ff fb27 	bl	8000d6c <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001722:	f7ff fb23 	bl	8000d6c <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e081      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001734:	4b43      	ldr	r3, [pc, #268]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69da      	ldr	r2, [r3, #28]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	019b      	lsls	r3, r3, #6
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	3b01      	subs	r3, #1
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001762:	061b      	lsls	r3, r3, #24
 8001764:	4937      	ldr	r1, [pc, #220]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 8001766:	4313      	orrs	r3, r2
 8001768:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800176a:	4b37      	ldr	r3, [pc, #220]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fafc 	bl	8000d6c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001778:	f7ff faf8 	bl	8000d6c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e056      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x41c>
 8001796:	e04e      	b.n	8001836 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b2b      	ldr	r3, [pc, #172]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fae5 	bl	8000d6c <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fae1 	bl	8000d6c <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e03f      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x44a>
 80017c4:	e037      	b.n	8001836 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e032      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_RCC_OscConfig+0x4e8>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d028      	beq.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d121      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d11a      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001802:	4013      	ands	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001808:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180a:	4293      	cmp	r3, r2
 800180c:	d111      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	085b      	lsrs	r3, r3, #1
 800181a:	3b01      	subs	r3, #1
 800181c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40007000 	.word	0x40007000
 8001844:	40023800 	.word	0x40023800
 8001848:	42470060 	.word	0x42470060

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0cc      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d90c      	bls.n	8001888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d044      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d119      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	2b03      	cmp	r3, #3
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e067      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4934      	ldr	r1, [pc, #208]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa16 	bl	8000d6c <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff fa12 	bl	8000d6c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d20c      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f976 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	080026cc 	.word	0x080026cc
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000034 	.word	0x20000034

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a30:	4b67      	ldr	r3, [pc, #412]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d00d      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f200 80bd 	bhi.w	8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4a:	e0b7      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b61      	ldr	r3, [pc, #388]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a4e:	60bb      	str	r3, [r7, #8]
       break;
 8001a50:	e0b7      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a54:	60bb      	str	r3, [r7, #8]
      break;
 8001a56:	e0b4      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a58:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04d      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b58      	ldr	r3, [pc, #352]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	461a      	mov	r2, r3
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a7e:	f04f 0100 	mov.w	r1, #0
 8001a82:	ea02 0800 	and.w	r8, r2, r0
 8001a86:	ea03 0901 	and.w	r9, r3, r1
 8001a8a:	4640      	mov	r0, r8
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	014b      	lsls	r3, r1, #5
 8001a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a9c:	0142      	lsls	r2, r0, #5
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	ebb0 0008 	subs.w	r0, r0, r8
 8001aa6:	eb61 0109 	sbc.w	r1, r1, r9
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ab8:	0182      	lsls	r2, r0, #6
 8001aba:	1a12      	subs	r2, r2, r0
 8001abc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	00d9      	lsls	r1, r3, #3
 8001aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ace:	00d0      	lsls	r0, r2, #3
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	eb12 0208 	adds.w	r2, r2, r8
 8001ad8:	eb43 0309 	adc.w	r3, r3, r9
 8001adc:	f04f 0000 	mov.w	r0, #0
 8001ae0:	f04f 0100 	mov.w	r1, #0
 8001ae4:	0259      	lsls	r1, r3, #9
 8001ae6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001aea:	0250      	lsls	r0, r2, #9
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	f7fe fb6a 	bl	80001d4 <__aeabi_uldivmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4613      	mov	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e04a      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0a:	4b31      	ldr	r3, [pc, #196]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	461a      	mov	r2, r3
 8001b12:	f04f 0300 	mov.w	r3, #0
 8001b16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b1a:	f04f 0100 	mov.w	r1, #0
 8001b1e:	ea02 0400 	and.w	r4, r2, r0
 8001b22:	ea03 0501 	and.w	r5, r3, r1
 8001b26:	4620      	mov	r0, r4
 8001b28:	4629      	mov	r1, r5
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	014b      	lsls	r3, r1, #5
 8001b34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b38:	0142      	lsls	r2, r0, #5
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	1b00      	subs	r0, r0, r4
 8001b40:	eb61 0105 	sbc.w	r1, r1, r5
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	018b      	lsls	r3, r1, #6
 8001b4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b52:	0182      	lsls	r2, r0, #6
 8001b54:	1a12      	subs	r2, r2, r0
 8001b56:	eb63 0301 	sbc.w	r3, r3, r1
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	00d9      	lsls	r1, r3, #3
 8001b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b68:	00d0      	lsls	r0, r2, #3
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	1912      	adds	r2, r2, r4
 8001b70:	eb45 0303 	adc.w	r3, r5, r3
 8001b74:	f04f 0000 	mov.w	r0, #0
 8001b78:	f04f 0100 	mov.w	r1, #0
 8001b7c:	0299      	lsls	r1, r3, #10
 8001b7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b82:	0290      	lsls	r0, r2, #10
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	f7fe fb1e 	bl	80001d4 <__aeabi_uldivmod>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	3301      	adds	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001bbe:	60bb      	str	r3, [r7, #8]
      break;
 8001bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	00f42400 	.word	0x00f42400
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf8:	f7ff fff0 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	0a9b      	lsrs	r3, r3, #10
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	; (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800
 8001c18:	080026dc 	.word	0x080026dc

08001c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c20:	f7ff ffdc 	bl	8001bdc <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	0b5b      	lsrs	r3, r3, #13
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	080026dc 	.word	0x080026dc

08001c44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e07b      	b.n	8001d4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d108      	bne.n	8001c70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c66:	d009      	beq.n	8001c7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
 8001c6e:	e005      	b.n	8001c7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7fe fdcc 	bl	8000834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	ea42 0103 	orr.w	r1, r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	f003 0104 	and.w	r1, r3, #4
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f003 0210 	and.w	r2, r3, #16
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69da      	ldr	r2, [r3, #28]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b08c      	sub	sp, #48	; 0x30
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_SPI_TransmitReceive+0x26>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e18a      	b.n	8002092 <HAL_SPI_TransmitReceive+0x33c>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d84:	f7fe fff2 	bl	8000d6c <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d00f      	beq.n	8001dc6 <HAL_SPI_TransmitReceive+0x70>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dac:	d107      	bne.n	8001dbe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d103      	bne.n	8001dbe <HAL_SPI_TransmitReceive+0x68>
 8001db6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d003      	beq.n	8001dc6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001dc4:	e15b      	b.n	800207e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_SPI_TransmitReceive+0x82>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_SPI_TransmitReceive+0x82>
 8001dd2:	887b      	ldrh	r3, [r7, #2]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d103      	bne.n	8001de0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001dde:	e14e      	b.n	800207e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d003      	beq.n	8001df4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2205      	movs	r2, #5
 8001df0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	887a      	ldrh	r2, [r7, #2]
 8001e04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	887a      	ldrh	r2, [r7, #2]
 8001e0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	887a      	ldrh	r2, [r7, #2]
 8001e16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	887a      	ldrh	r2, [r7, #2]
 8001e1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d007      	beq.n	8001e48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e50:	d178      	bne.n	8001f44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_SPI_TransmitReceive+0x10a>
 8001e5a:	8b7b      	ldrh	r3, [r7, #26]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d166      	bne.n	8001f2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	1c9a      	adds	r2, r3, #2
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e84:	e053      	b.n	8001f2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d11b      	bne.n	8001ecc <HAL_SPI_TransmitReceive+0x176>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d016      	beq.n	8001ecc <HAL_SPI_TransmitReceive+0x176>
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d113      	bne.n	8001ecc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	881a      	ldrh	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb4:	1c9a      	adds	r2, r3, #2
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d119      	bne.n	8001f0e <HAL_SPI_TransmitReceive+0x1b8>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d014      	beq.n	8001f0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	b292      	uxth	r2, r2
 8001ef0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	1c9a      	adds	r2, r3, #2
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b01      	subs	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f0e:	f7fe ff2d 	bl	8000d6c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d807      	bhi.n	8001f2e <HAL_SPI_TransmitReceive+0x1d8>
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d003      	beq.n	8001f2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f2c:	e0a7      	b.n	800207e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1a6      	bne.n	8001e86 <HAL_SPI_TransmitReceive+0x130>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1a1      	bne.n	8001e86 <HAL_SPI_TransmitReceive+0x130>
 8001f42:	e07c      	b.n	800203e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x1fc>
 8001f4c:	8b7b      	ldrh	r3, [r7, #26]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d16b      	bne.n	800202a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	330c      	adds	r3, #12
 8001f5c:	7812      	ldrb	r2, [r2, #0]
 8001f5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	3b01      	subs	r3, #1
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f78:	e057      	b.n	800202a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d11c      	bne.n	8001fc2 <HAL_SPI_TransmitReceive+0x26c>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d017      	beq.n	8001fc2 <HAL_SPI_TransmitReceive+0x26c>
 8001f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d114      	bne.n	8001fc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	7812      	ldrb	r2, [r2, #0]
 8001fa4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d119      	bne.n	8002004 <HAL_SPI_TransmitReceive+0x2ae>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d014      	beq.n	8002004 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002000:	2301      	movs	r3, #1
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002004:	f7fe feb2 	bl	8000d6c <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002010:	429a      	cmp	r2, r3
 8002012:	d803      	bhi.n	800201c <HAL_SPI_TransmitReceive+0x2c6>
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d102      	bne.n	8002022 <HAL_SPI_TransmitReceive+0x2cc>
 800201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201e:	2b00      	cmp	r3, #0
 8002020:	d103      	bne.n	800202a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002028:	e029      	b.n	800207e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1a2      	bne.n	8001f7a <HAL_SPI_TransmitReceive+0x224>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d19d      	bne.n	8001f7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800203e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002040:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f8b2 	bl	80021ac <SPI_EndRxTxTransaction>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2220      	movs	r2, #32
 8002058:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800205a:	e010      	b.n	800207e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10b      	bne.n	800207c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	e000      	b.n	800207e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800207c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800208e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002092:	4618      	mov	r0, r3
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020ac:	f7fe fe5e 	bl	8000d6c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	1a9b      	subs	r3, r3, r2
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020bc:	f7fe fe56 	bl	8000d6c <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	0d1b      	lsrs	r3, r3, #20
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020d2:	e054      	b.n	800217e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020da:	d050      	beq.n	800217e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020dc:	f7fe fe46 	bl	8000d6c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	69fa      	ldr	r2, [r7, #28]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d902      	bls.n	80020f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d13d      	bne.n	800216e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002100:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800210a:	d111      	bne.n	8002130 <SPI_WaitFlagStateUntilTimeout+0x94>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002114:	d004      	beq.n	8002120 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211e:	d107      	bne.n	8002130 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800212e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002138:	d10f      	bne.n	800215a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002158:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e017      	b.n	800219e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3b01      	subs	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4013      	ands	r3, r2
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	429a      	cmp	r2, r3
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	79fb      	ldrb	r3, [r7, #7]
 8002198:	429a      	cmp	r2, r3
 800219a:	d19b      	bne.n	80020d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000

080021ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <SPI_EndRxTxTransaction+0x7c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1b      	ldr	r2, [pc, #108]	; (800222c <SPI_EndRxTxTransaction+0x80>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021d6:	d112      	bne.n	80021fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff ff5a 	bl	800209c <SPI_WaitFlagStateUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e00f      	b.n	800221e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3b01      	subs	r3, #1
 8002208:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002214:	2b80      	cmp	r3, #128	; 0x80
 8002216:	d0f2      	beq.n	80021fe <SPI_EndRxTxTransaction+0x52>
 8002218:	e000      	b.n	800221c <SPI_EndRxTxTransaction+0x70>
        break;
 800221a:	bf00      	nop
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000
 800222c:	165e9f81 	.word	0x165e9f81

08002230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e03f      	b.n	80022c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fb34 	bl	80008c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2224      	movs	r2, #36	; 0x24
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f829 	bl	80022cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695a      	ldr	r2, [r3, #20]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d0:	b09f      	sub	sp, #124	; 0x7c
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e2:	68d9      	ldr	r1, [r3, #12]
 80022e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	ea40 0301 	orr.w	r3, r0, r1
 80022ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80022ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	431a      	orrs	r2, r3
 80022fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	4313      	orrs	r3, r2
 8002304:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002310:	f021 010c 	bic.w	r1, r1, #12
 8002314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800231a:	430b      	orrs	r3, r1
 800231c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800231e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232a:	6999      	ldr	r1, [r3, #24]
 800232c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	ea40 0301 	orr.w	r3, r0, r1
 8002334:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4bc5      	ldr	r3, [pc, #788]	; (8002650 <UART_SetConfig+0x384>)
 800233c:	429a      	cmp	r2, r3
 800233e:	d004      	beq.n	800234a <UART_SetConfig+0x7e>
 8002340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4bc3      	ldr	r3, [pc, #780]	; (8002654 <UART_SetConfig+0x388>)
 8002346:	429a      	cmp	r2, r3
 8002348:	d103      	bne.n	8002352 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800234a:	f7ff fc67 	bl	8001c1c <HAL_RCC_GetPCLK2Freq>
 800234e:	6778      	str	r0, [r7, #116]	; 0x74
 8002350:	e002      	b.n	8002358 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002352:	f7ff fc4f 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8002356:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002360:	f040 80b6 	bne.w	80024d0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002366:	461c      	mov	r4, r3
 8002368:	f04f 0500 	mov.w	r5, #0
 800236c:	4622      	mov	r2, r4
 800236e:	462b      	mov	r3, r5
 8002370:	1891      	adds	r1, r2, r2
 8002372:	6439      	str	r1, [r7, #64]	; 0x40
 8002374:	415b      	adcs	r3, r3
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
 8002378:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800237c:	1912      	adds	r2, r2, r4
 800237e:	eb45 0303 	adc.w	r3, r5, r3
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	00d9      	lsls	r1, r3, #3
 800238c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002390:	00d0      	lsls	r0, r2, #3
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	1911      	adds	r1, r2, r4
 8002398:	6639      	str	r1, [r7, #96]	; 0x60
 800239a:	416b      	adcs	r3, r5
 800239c:	667b      	str	r3, [r7, #100]	; 0x64
 800239e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	1891      	adds	r1, r2, r2
 80023aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80023ac:	415b      	adcs	r3, r3
 80023ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80023b8:	f7fd ff0c 	bl	80001d4 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4ba5      	ldr	r3, [pc, #660]	; (8002658 <UART_SetConfig+0x38c>)
 80023c2:	fba3 2302 	umull	r2, r3, r3, r2
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	011e      	lsls	r6, r3, #4
 80023ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023cc:	461c      	mov	r4, r3
 80023ce:	f04f 0500 	mov.w	r5, #0
 80023d2:	4622      	mov	r2, r4
 80023d4:	462b      	mov	r3, r5
 80023d6:	1891      	adds	r1, r2, r2
 80023d8:	6339      	str	r1, [r7, #48]	; 0x30
 80023da:	415b      	adcs	r3, r3
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
 80023de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023e2:	1912      	adds	r2, r2, r4
 80023e4:	eb45 0303 	adc.w	r3, r5, r3
 80023e8:	f04f 0000 	mov.w	r0, #0
 80023ec:	f04f 0100 	mov.w	r1, #0
 80023f0:	00d9      	lsls	r1, r3, #3
 80023f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023f6:	00d0      	lsls	r0, r2, #3
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	1911      	adds	r1, r2, r4
 80023fe:	65b9      	str	r1, [r7, #88]	; 0x58
 8002400:	416b      	adcs	r3, r5
 8002402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	461a      	mov	r2, r3
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	1891      	adds	r1, r2, r2
 8002410:	62b9      	str	r1, [r7, #40]	; 0x28
 8002412:	415b      	adcs	r3, r3
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800241a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800241e:	f7fd fed9 	bl	80001d4 <__aeabi_uldivmod>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <UART_SetConfig+0x38c>)
 8002428:	fba3 1302 	umull	r1, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	2164      	movs	r1, #100	; 0x64
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	3332      	adds	r3, #50	; 0x32
 800243a:	4a87      	ldr	r2, [pc, #540]	; (8002658 <UART_SetConfig+0x38c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002448:	441e      	add	r6, r3
 800244a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244c:	4618      	mov	r0, r3
 800244e:	f04f 0100 	mov.w	r1, #0
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	1894      	adds	r4, r2, r2
 8002458:	623c      	str	r4, [r7, #32]
 800245a:	415b      	adcs	r3, r3
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
 800245e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002462:	1812      	adds	r2, r2, r0
 8002464:	eb41 0303 	adc.w	r3, r1, r3
 8002468:	f04f 0400 	mov.w	r4, #0
 800246c:	f04f 0500 	mov.w	r5, #0
 8002470:	00dd      	lsls	r5, r3, #3
 8002472:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002476:	00d4      	lsls	r4, r2, #3
 8002478:	4622      	mov	r2, r4
 800247a:	462b      	mov	r3, r5
 800247c:	1814      	adds	r4, r2, r0
 800247e:	653c      	str	r4, [r7, #80]	; 0x50
 8002480:	414b      	adcs	r3, r1
 8002482:	657b      	str	r3, [r7, #84]	; 0x54
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	461a      	mov	r2, r3
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	1891      	adds	r1, r2, r2
 8002490:	61b9      	str	r1, [r7, #24]
 8002492:	415b      	adcs	r3, r3
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800249e:	f7fd fe99 	bl	80001d4 <__aeabi_uldivmod>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4b6c      	ldr	r3, [pc, #432]	; (8002658 <UART_SetConfig+0x38c>)
 80024a8:	fba3 1302 	umull	r1, r3, r3, r2
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	2164      	movs	r1, #100	; 0x64
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	3332      	adds	r3, #50	; 0x32
 80024ba:	4a67      	ldr	r2, [pc, #412]	; (8002658 <UART_SetConfig+0x38c>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	f003 0207 	and.w	r2, r3, #7
 80024c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4432      	add	r2, r6
 80024cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024ce:	e0b9      	b.n	8002644 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d2:	461c      	mov	r4, r3
 80024d4:	f04f 0500 	mov.w	r5, #0
 80024d8:	4622      	mov	r2, r4
 80024da:	462b      	mov	r3, r5
 80024dc:	1891      	adds	r1, r2, r2
 80024de:	6139      	str	r1, [r7, #16]
 80024e0:	415b      	adcs	r3, r3
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024e8:	1912      	adds	r2, r2, r4
 80024ea:	eb45 0303 	adc.w	r3, r5, r3
 80024ee:	f04f 0000 	mov.w	r0, #0
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	00d9      	lsls	r1, r3, #3
 80024f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024fc:	00d0      	lsls	r0, r2, #3
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	eb12 0804 	adds.w	r8, r2, r4
 8002506:	eb43 0905 	adc.w	r9, r3, r5
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4618      	mov	r0, r3
 8002510:	f04f 0100 	mov.w	r1, #0
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	008b      	lsls	r3, r1, #2
 800251e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002522:	0082      	lsls	r2, r0, #2
 8002524:	4640      	mov	r0, r8
 8002526:	4649      	mov	r1, r9
 8002528:	f7fd fe54 	bl	80001d4 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4b49      	ldr	r3, [pc, #292]	; (8002658 <UART_SetConfig+0x38c>)
 8002532:	fba3 2302 	umull	r2, r3, r3, r2
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	011e      	lsls	r6, r3, #4
 800253a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800253c:	4618      	mov	r0, r3
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	1894      	adds	r4, r2, r2
 8002548:	60bc      	str	r4, [r7, #8]
 800254a:	415b      	adcs	r3, r3
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002552:	1812      	adds	r2, r2, r0
 8002554:	eb41 0303 	adc.w	r3, r1, r3
 8002558:	f04f 0400 	mov.w	r4, #0
 800255c:	f04f 0500 	mov.w	r5, #0
 8002560:	00dd      	lsls	r5, r3, #3
 8002562:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002566:	00d4      	lsls	r4, r2, #3
 8002568:	4622      	mov	r2, r4
 800256a:	462b      	mov	r3, r5
 800256c:	1814      	adds	r4, r2, r0
 800256e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002570:	414b      	adcs	r3, r1
 8002572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	f04f 0100 	mov.w	r1, #0
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	008b      	lsls	r3, r1, #2
 8002588:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800258c:	0082      	lsls	r2, r0, #2
 800258e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002592:	f7fd fe1f 	bl	80001d4 <__aeabi_uldivmod>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <UART_SetConfig+0x38c>)
 800259c:	fba3 1302 	umull	r1, r3, r3, r2
 80025a0:	095b      	lsrs	r3, r3, #5
 80025a2:	2164      	movs	r1, #100	; 0x64
 80025a4:	fb01 f303 	mul.w	r3, r1, r3
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	3332      	adds	r3, #50	; 0x32
 80025ae:	4a2a      	ldr	r2, [pc, #168]	; (8002658 <UART_SetConfig+0x38c>)
 80025b0:	fba2 2303 	umull	r2, r3, r2, r3
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ba:	441e      	add	r6, r3
 80025bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025be:	4618      	mov	r0, r3
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	1894      	adds	r4, r2, r2
 80025ca:	603c      	str	r4, [r7, #0]
 80025cc:	415b      	adcs	r3, r3
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025d4:	1812      	adds	r2, r2, r0
 80025d6:	eb41 0303 	adc.w	r3, r1, r3
 80025da:	f04f 0400 	mov.w	r4, #0
 80025de:	f04f 0500 	mov.w	r5, #0
 80025e2:	00dd      	lsls	r5, r3, #3
 80025e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025e8:	00d4      	lsls	r4, r2, #3
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	eb12 0a00 	adds.w	sl, r2, r0
 80025f2:	eb43 0b01 	adc.w	fp, r3, r1
 80025f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f04f 0100 	mov.w	r1, #0
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	008b      	lsls	r3, r1, #2
 800260a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800260e:	0082      	lsls	r2, r0, #2
 8002610:	4650      	mov	r0, sl
 8002612:	4659      	mov	r1, fp
 8002614:	f7fd fdde 	bl	80001d4 <__aeabi_uldivmod>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <UART_SetConfig+0x38c>)
 800261e:	fba3 1302 	umull	r1, r3, r3, r2
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2164      	movs	r1, #100	; 0x64
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	3332      	adds	r3, #50	; 0x32
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <UART_SetConfig+0x38c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4432      	add	r2, r6
 8002642:	609a      	str	r2, [r3, #8]
}
 8002644:	bf00      	nop
 8002646:	377c      	adds	r7, #124	; 0x7c
 8002648:	46bd      	mov	sp, r7
 800264a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800264e:	bf00      	nop
 8002650:	40011000 	.word	0x40011000
 8002654:	40011400 	.word	0x40011400
 8002658:	51eb851f 	.word	0x51eb851f

0800265c <__libc_init_array>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	4d0d      	ldr	r5, [pc, #52]	; (8002694 <__libc_init_array+0x38>)
 8002660:	4c0d      	ldr	r4, [pc, #52]	; (8002698 <__libc_init_array+0x3c>)
 8002662:	1b64      	subs	r4, r4, r5
 8002664:	10a4      	asrs	r4, r4, #2
 8002666:	2600      	movs	r6, #0
 8002668:	42a6      	cmp	r6, r4
 800266a:	d109      	bne.n	8002680 <__libc_init_array+0x24>
 800266c:	4d0b      	ldr	r5, [pc, #44]	; (800269c <__libc_init_array+0x40>)
 800266e:	4c0c      	ldr	r4, [pc, #48]	; (80026a0 <__libc_init_array+0x44>)
 8002670:	f000 f820 	bl	80026b4 <_init>
 8002674:	1b64      	subs	r4, r4, r5
 8002676:	10a4      	asrs	r4, r4, #2
 8002678:	2600      	movs	r6, #0
 800267a:	42a6      	cmp	r6, r4
 800267c:	d105      	bne.n	800268a <__libc_init_array+0x2e>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	f855 3b04 	ldr.w	r3, [r5], #4
 8002684:	4798      	blx	r3
 8002686:	3601      	adds	r6, #1
 8002688:	e7ee      	b.n	8002668 <__libc_init_array+0xc>
 800268a:	f855 3b04 	ldr.w	r3, [r5], #4
 800268e:	4798      	blx	r3
 8002690:	3601      	adds	r6, #1
 8002692:	e7f2      	b.n	800267a <__libc_init_array+0x1e>
 8002694:	080026ec 	.word	0x080026ec
 8002698:	080026ec 	.word	0x080026ec
 800269c:	080026ec 	.word	0x080026ec
 80026a0:	080026f0 	.word	0x080026f0

080026a4 <memset>:
 80026a4:	4402      	add	r2, r0
 80026a6:	4603      	mov	r3, r0
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d100      	bne.n	80026ae <memset+0xa>
 80026ac:	4770      	bx	lr
 80026ae:	f803 1b01 	strb.w	r1, [r3], #1
 80026b2:	e7f9      	b.n	80026a8 <memset+0x4>

080026b4 <_init>:
 80026b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b6:	bf00      	nop
 80026b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ba:	bc08      	pop	{r3}
 80026bc:	469e      	mov	lr, r3
 80026be:	4770      	bx	lr

080026c0 <_fini>:
 80026c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c2:	bf00      	nop
 80026c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c6:	bc08      	pop	{r3}
 80026c8:	469e      	mov	lr, r3
 80026ca:	4770      	bx	lr
